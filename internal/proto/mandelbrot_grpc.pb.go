// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: mandelbrot.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MandelbrotClient is the client API for Mandelbrot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MandelbrotClient interface {
	GetImage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Image, error)
}

type mandelbrotClient struct {
	cc grpc.ClientConnInterface
}

func NewMandelbrotClient(cc grpc.ClientConnInterface) MandelbrotClient {
	return &mandelbrotClient{cc}
}

func (c *mandelbrotClient) GetImage(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/Mandelbrot/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MandelbrotServer is the server API for Mandelbrot service.
// All implementations must embed UnimplementedMandelbrotServer
// for forward compatibility
type MandelbrotServer interface {
	GetImage(context.Context, *emptypb.Empty) (*Image, error)
	mustEmbedUnimplementedMandelbrotServer()
}

// UnimplementedMandelbrotServer must be embedded to have forward compatible implementations.
type UnimplementedMandelbrotServer struct {
}

func (UnimplementedMandelbrotServer) GetImage(context.Context, *emptypb.Empty) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedMandelbrotServer) mustEmbedUnimplementedMandelbrotServer() {}

// UnsafeMandelbrotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MandelbrotServer will
// result in compilation errors.
type UnsafeMandelbrotServer interface {
	mustEmbedUnimplementedMandelbrotServer()
}

func RegisterMandelbrotServer(s grpc.ServiceRegistrar, srv MandelbrotServer) {
	s.RegisterService(&Mandelbrot_ServiceDesc, srv)
}

func _Mandelbrot_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MandelbrotServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mandelbrot/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MandelbrotServer).GetImage(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Mandelbrot_ServiceDesc is the grpc.ServiceDesc for Mandelbrot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mandelbrot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mandelbrot",
	HandlerType: (*MandelbrotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImage",
			Handler:    _Mandelbrot_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mandelbrot.proto",
}
